package com.knightonline.shared.network.common;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * @author Mamaorha
 *
 */
public abstract class PacketHandler implements Runnable
{
	private static final String PACKET_HANDLER_THREAD = "packet handler thread";

	protected BlockingQueue<Packet> requestQueue;
	protected ExecutorService threadExecutors;
	protected AtomicBoolean isAlive;

	public PacketHandler()
	{
		this.requestQueue = new LinkedBlockingQueue<Packet>();

		this.isAlive = new AtomicBoolean(true);
		this.threadExecutors = Executors.newFixedThreadPool(getNumberOfThreads());
		this.threadExecutors.submit(this);
	}

	protected abstract int getNumberOfThreads();

	protected abstract void handlePacket(Packet requestPacket) throws InterruptedException;

	@Override
	public void run()
	{
		Thread.currentThread().setName(PACKET_HANDLER_THREAD);
	
		try
		{
			while (isAlive.get())
			{
				Packet requestPacket = requestQueue.take();
				handlePacket(requestPacket);
			}
		}
		
		catch (Exception e)
		{
			if (isAlive.get())
			{
				e.printStackTrace();
			}
		}

	}

	public void addWork(Packet packet) throws InterruptedException
	{
		requestQueue.put(packet);
	}
}
