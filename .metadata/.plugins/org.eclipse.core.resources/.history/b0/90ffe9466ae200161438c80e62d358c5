package com.knightonline.login.server;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.knightonline.login.data.constants.ConfigurationConstants;
import com.knightonline.shared.helper.FileHelper;
import com.knightonline.shared.network.KOServer;
import com.knightonline.shared.network.common.HandlerTypeEnum;
import com.knightonline.shared.network.common.ServerConfiguration;
import com.knightonline.shared.utils.ApplicationPropertiesManager;
import com.knightonline.shared.utils.KOApplicationContext;
import com.knightonline.shared.utils.PrintUtils;

@Component
public class LoginServer
{
	@Autowired
	protected FileHelper fileHelper;

	protected ServerConfiguration configuration;
	protected FileWriter loginServerLog;
	protected FileWriter userLog;

	public boolean startup()
	{
		if(!initLogs())
		{
			return false;
		}
		
		
		KOApplicationContext.getInstance().init();
		
		System.out.println("Connected to database server.");
		
		System.out.println(PrintUtils.printSection("LogIn Server for Knight Online v" + ApplicationPropertiesManager.getInstance().getValue(ConfigurationConstants.SERVER_VERSION, ConfigurationConstants.DEFAULT_SERVER_VERSION)));
		
		configuration = new ServerConfiguration();
		configuration.setIp(ApplicationPropertiesManager.getInstance().getValue("login_server_ip", "0.0.0.0"));
		configuration.setPort(ApplicationPropertiesManager.getInstance().getIntValue("login_server_port", 15100));
		configuration.setMsgTimeout(ApplicationPropertiesManager.getInstance().getIntValue("login_server_msg_timeout", 3000));
		configuration.setReceiveBufferSize(ApplicationPropertiesManager.getInstance().getIntValue("login_server_recieve_buffer_size", 1048576));
		configuration.setHandlerType(HandlerTypeEnum.ByteBuffer);

		initPacketHandlers();
		
		new KOServer(configuration);

		return true;
	}

	private boolean initLogs()
	{
		fileHelper.createDir("Logs");

		try
		{
			loginServerLog = new FileWriter("./Logs/LoginServer.log", true);
		}

		catch (IOException e)
		{
			System.out.println("ERROR: Unable to open log file.");
			e.printStackTrace();
			return false;
		}

		try
		{
			userLog = new FileWriter(String.format("./Logs/Login_%d_%d_%d.log.log", Calendar.getInstance().get(Calendar.DAY_OF_WEEK), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.YEAR)), true);
		}

		catch (IOException e)
		{
			System.out.println("ERROR: Unable to open user log file.");
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	private void initPacketHandlers()
	{
		//configuration.addHandler(opcode, handler);
	}
	
	public void closeLogs()
	{
		try
		{
			if (null != loginServerLog)
			{
				loginServerLog.close();
			}

			if (null != userLog)
			{
				userLog.close();
			}
		}
		
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
}
