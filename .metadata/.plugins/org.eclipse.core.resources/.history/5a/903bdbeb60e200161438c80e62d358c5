package com.knightonline.shared.persistence.cache;

import java.net.URL;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.hibernate.cache.CacheDataDescription;
import org.hibernate.cache.CacheException;
import org.hibernate.cache.CollectionRegion;
import org.hibernate.cache.EhCache;
import org.hibernate.cache.EntityRegion;
import org.hibernate.cache.QueryResultsRegion;
import org.hibernate.cache.RegionFactory;
import org.hibernate.cache.Timestamper;
import org.hibernate.cache.TimestampsRegion;
import org.hibernate.cache.impl.bridge.CollectionRegionAdapter;
import org.hibernate.cache.impl.bridge.EntityRegionAdapter;
import org.hibernate.cache.impl.bridge.QueryResultsRegionAdapter;
import org.hibernate.cache.impl.bridge.TimestampsRegionAdapter;
import org.hibernate.cfg.Environment;
import org.hibernate.cfg.Settings;
import org.hibernate.util.ConfigHelper;
import org.hibernate.util.StringHelper;

import net.sf.ehcache.CacheManager;

public class EhcacheReqionFactory implements RegionFactory
{
	private static final Logger log = Logger.getLogger(EhcacheReqionFactory.class);

	private static final String MISSING_CONFIGURATION = "Could not find configuration [%s]; using defaults.";
	private static final String STARTED_EH_CACHE_REGION = "started EHCache region: %s";

	private static final String ATTEMP_RESTART_AN_ALREADY_STARTED_EHCACHEPROVIDER = "Attempt to restart an already started EhCacheProvider. Use sessionFactory.close() " + " between repeated calls to buildSessionFactory. Using previously created EhCacheProvider." + " If this behaviour is required, consider using net.sf.ehcache.hibernate.SingletonEhCacheProvider.";

	private static final String PARSE_CONFIGURATION_ERROR = "Cannot parseConfiguration CacheManager. Attempt to create a new instance of " + "CacheManager using the diskStorePath";
	private static final String CREATING_EH_CACHE_PROVIDER_FROM_A_SPECIFIED_RESOURCE = "Creating EhCacheProvider from a specified resource: %s Resolved to URL: %s";

	public static CacheManager manager = null;

	protected Settings settings = null;
	protected Properties set_properties = null;

	public EhcacheReqionFactory(Properties properties)
	{
		this.set_properties = properties;
	}

	protected EhCache buildCache(String name, Properties properties) throws CacheException
	{
		try
		{
			net.sf.ehcache.Cache cache = manager.getCache(name);

			if (cache == null)
			{
				log.warn(String.format(MISSING_CONFIGURATION, name));
				manager.addCache(name);

				cache = manager.getCache(name);
				log.debug(String.format(STARTED_EH_CACHE_REGION, name));
			}

			return new EhCache(cache);
		}

		catch (net.sf.ehcache.CacheException e)
		{
			throw new CacheException(e);
		}
	}

	@Override
	public long nextTimestamp()
	{
		return Timestamper.next();
	}

	@Override
	public void start(Settings i_settings, Properties properties) throws CacheException
	{
		this.settings = i_settings;

		if (manager != null)
		{
			log.warn(ATTEMP_RESTART_AN_ALREADY_STARTED_EHCACHEPROVIDER);
			return;
		}

		try
		{
			String configurationResourceName = null;

			if (properties != null)
			{
				configurationResourceName = (String) properties.get(Environment.CACHE_PROVIDER_CONFIG);
			}

			if (StringHelper.isEmpty(configurationResourceName))
			{
				manager = new CacheManager();
			}

			else
			{
				URL url = loadResource(configurationResourceName);
				manager = new CacheManager(url);
			}
		}

		catch (net.sf.ehcache.CacheException e)
		{
			if (e.getMessage().startsWith(PARSE_CONFIGURATION_ERROR))
			{
				throw new CacheException(ATTEMP_RESTART_AN_ALREADY_STARTED_EHCACHEPROVIDER, e);
			}
			throw e;
		}
	}

	private URL loadResource(String configurationResourceName)
	{
		URL url = ConfigHelper.locateConfig(configurationResourceName);

		if (log.isDebugEnabled())
		{
			log.debug(String.format(CREATING_EH_CACHE_PROVIDER_FROM_A_SPECIFIED_RESOURCE, configurationResourceName, url));
		}
		return url;
	}

	/**
	 * Callback to perform any necessary cleanup of the underlying cache
	 * implementation during SessionFactory.close().
	 */
	@Override
	public void stop()
	{
		if (manager != null)
		{
			manager.shutdown();
			manager = null;
		}
	}

	@Override
	public boolean isMinimalPutsEnabledByDefault()
	{
		return false;
	}

	@Override
	public EntityRegion buildEntityRegion(String regionName, Properties properties, CacheDataDescription metadata) throws CacheException
	{
		return new EntityRegionAdapter(buildCache(regionName, properties), this.settings, metadata);
	}

	@Override
	public CollectionRegion buildCollectionRegion(String regionName, Properties properties, CacheDataDescription metadata) throws CacheException
	{
		return new CollectionRegionAdapter(buildCache(regionName, properties), this.settings, metadata);
	}

	@Override
	public QueryResultsRegion buildQueryResultsRegion(String regionName, Properties properties) throws CacheException
	{
		return new QueryResultsRegionAdapter(buildCache(regionName, properties), this.settings)
		{
			// empty
		};
	}

	@Override
	public TimestampsRegion buildTimestampsRegion(String regionName, Properties properties) throws CacheException
	{
		return new TimestampsRegionAdapter(buildCache(regionName, properties), this.settings)
		{
			// empty
		};
	}
}
